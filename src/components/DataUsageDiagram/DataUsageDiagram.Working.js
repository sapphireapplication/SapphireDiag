import React, { useEffect, useState } from "react";
import * as d3 from "d3";
import CodeEditor from "./CodeEditor";
export default function DataUsageDiagram(props) {
  const { classes } = props;
  //const [LoadCode, setLoadCode] = useState('0');
  var SELENTITY = { codedata: [], entity: "" };
  var PGMCODE = [];
  var FTXT = "";
  let currentPgm = '';
  //const [codeData, setCodeData] = React.useState({pgmID:"", entID:"", codeData:[]});
var codeData = {};
    useEffect(() => {
        //console.log("props in DFD==", props);
        //console.log("kab yahan aata hai", LoadAgain);
        drawDUD();
    });
    function handlePgmStructureChart(){
    //console.log('shilpi handlepgm clicked ',props)
    let progDetails = [];
    //let prog = props.programList.find(o => o.PGMID == currentPgm)
    progDetails.push({
            field: "PGMID",
            code: currentPgm.PGMID,
            text: currentPgm.PGMTX,
            value: currentPgm.PGMID, 
          })
    //console.log('shilpi progdetails',progDetails)
    props.linkClickHandler('','but28',progDetails,'Pgm Structure Chart','LBContext','')
  }

  function handleDataUsage(){
    //console.log('shilpi handledatausage clicked ')
    let progDetails = [];
    let prog = props.programList.find(o => o.PGMID == currentPgm)
     progDetails.push({
            field: "PGMID",
            code: prog.PGMID,
            text: prog.PGMTX,
            value: prog.PGMID, 
          })
      props
          .setForProgram(progDetails)
           .then((res) => console.log(res))
            .then((json) =>
          //props.setDataUsageProgram(progDetails,props.programList)
          props.setDataUsageProgram(progDetails)
            )
  }
  function handleDataUsageFile(){
    //console.log('shilpi handledatausage clicked ',currentPgm)
    let progDetails = [];
    //let prog = props.programList.find(o => o.PGMID == currentPgm)
    progDetails.push({
            field: "ENTID",
            code: currentPgm.ENTID,
            text: currentPgm.ENTTX,
            value: currentPgm.ENTID, 
          })
    console.log('shilpi progdetails',progDetails)
    props.linkClickHandler('','but29',progDetails,'Data Usage','LBContext','')
  }

  function handleDataModelDiagram(){
    //console.log('shilpi handleDataModelDiagram clicked',currentPgm)
    let progDetails = [];
    //let prog = props.programList.find(o => o.PGMID == currentPgm)
    progDetails.push({
            field: "ENTID",
            code: currentPgm.ENTID,
            text: currentPgm.ENTTX,
            value: currentPgm.ENTID, 
          })
    //console.log('shilpi progdetails',progDetails)
    props.linkClickHandler('','but15',progDetails,'Data Model Diagram','LBContext','')
  }

  function drawDUD() {
    var treeData = props.DUDProgramData;

    // Set the dimensions and margins of the diagram
    //var margin = { top: 20, right: 90, bottom: 30, left: 0 },
    var margin = { top: 20, right: 90, bottom: 30, left: 90 },
      //width = 960 - margin.left - margin.right,
      //height = 500 - margin.top - margin.bottom;
      width = 5000 - margin.left - margin.right,   //changed width from 960 
      height = 1000 - margin.top - margin.bottom;

      let initialPos = []; //taken this array to overwrite x values generated by d3 on click of node

    // append the svg object to the body of the page
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin

    if (d3.select("#svg1")["_groups"][0][0] !== null)
      //removing the existing svg , if anys
      d3.select("#svg1").remove();
    /*let svg = d3
      .select("#DUDcontainerTree")
      .append("svg")
      .attr("id", "svg1")

      // .attr("width", width + margin.right + margin.left)
      // .attr("height", height + margin.top + margin.bottom);
      .attr("width", "100%")
      //.attr("height", 500)
      .attr("height", height)

      .append("g")
      .attr("id", "grpmain")
      .attr("transform", "translate(190," + margin.top + ")");*/
    //.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var i = 0,
      duration = 750,
      root;

    // declares a tree layout and assigns the size
    //var treemap = d3.tree().size([height, width]);

    // Assigns parent, children, height, depth
    root = d3.hierarchy(treeData, function (d) {
      return d.children;
    });
    //shilpi
    var diff = 0;
    height = 550;
    var num = root.children.length
    /*if(num >5 && num <=10){
      diff = num -5;
      height = 950 + diff*190;
    }
    if(num >10){
      diff = num -11;
      height = 950 + diff*85;
    }*/
    if(num >3){
      diff = num -3;
      height = 550 + diff * 183.33
    }

    
    let svg = d3
      .select("#DUDcontainerTree")
      .append("svg")
      .attr("id", "svg1")

      // .attr("width", width + margin.right + margin.left)
      // .attr("height", height + margin.top + margin.bottom);
      .attr("width", width)
      //.attr("height", 500)
      .attr("height",  height + margin.top + margin.bottom)
      //.attr("height",height)

      .append("g")
      .attr("id", "grpmain")
      .attr("transform", "translate(190," + margin.top + ")");
      
      var treemap = d3.tree().size([height, width]);

    root.x0 = height / 2;
    root.y0 = 0;

    // Collapse after the second level

    root.children.forEach(collapse);
    //Collapse only last 2
    //root.children.map((x, idx) => (idx === 0 || idx === 1 ? collapse(x) : ""));

    update(root);

    // Collapse the node and all it's children
    function collapse(d) {
      if (d.children) {
        d._children = d.children;
        d._children.forEach(collapse);
        d.children = null;
      }
    }

    function update(source) {
      // Assigns the x and y position for the nodes
      var treeData = treemap(root);

      // Compute the new tree layout.
      var nodes = treeData.descendants(),
        links = treeData.descendants().slice(1);
      console.log("nodes====", nodes);
      console.log("links====", links);

      // Normalize for fixed-depth.
      nodes.forEach(function (d) {
        //console.log('shilpi_DU data', d)
      if ((d.data.TEXT === d.data.ID) & (d.data.ID==='Entity')) {
          d.y = d.depth * 50;
        }
      else if((d.data.TEXT === d.data.ID) & (d.data.ID==='Schema'))
            //d.y = d.depth * 300 +100;
            d.y = d.depth *50 + 500
      else if((d.data.TEXT === d.data.ID) & (d.data.ID==='CODE'))
            d.y = d.depth * 50 + 750;
      else
          d.y = d.depth * 75
        //d.y = d.depth*150;
      });
      var chldHeight;
      if(num > 10){
        chldHeight = 30
      }
      else{
        chldHeight = 150
      }
      console.log('chldHeight', chldHeight)

      // ****************** Nodes section ***************************

      // Update the nodes...
      var node = svg.selectAll("g.node").data(nodes, function (d) {
        return d.id || (d.id = ++i);
      });
      //******** Adding below code to overwrite x values generated by d3 on click of nodes at depth=1 ************
      if(source == root){
        let nodes1;
        nodes1 = nodes.filter(node => node.depth === 1);
        nodes1.map((node) => {
        initialPos.push({
            id:node.id,
            x: node.x
        })
      })         
    }
  
    //now overriding
    if(source !=root){
      var origNode;
      var parId;
      var parNode;
        nodes.map((node)=>{
            if(node.depth == 1){
             
                origNode = initialPos.find(node1 => node1.id === node.id );
                if(node.x != origNode.x){
                //console.log('shilpi origNode',origNode)
                //console.log('shilpi newNode',node)
                node.x = origNode.x  //now override
                }
            }
            if(node.depth == 2){
                /* parent id*/
                 parId = node.parent.id;
                 parNode = initialPos.find(node1 => node1.id === parId );
                 node.x = parNode.x
            }
            if(node.depth == 3){
               parId = node.parent.id
               parNode = nodes.find(node1 => node1.id === parId)
               node.x = parNode.x
            }

        })
    }
    //*************************************************************************************************

      // Enter any new modes at the parent's previous position.
      var nodeEnter = node
        .enter()
        .append("g")
        .attr("class", "node")
        .attr("transform", function (d, x) {
          if (d.data.TEXT === d.data.ID) {
            //console.log("transform===", source.y0 + 100, source.x0 - 50, x);
            return (
              "translate(" + source.y0 + 100 + "," + (source.x0 - 50) + ")"
            );
          }

          return "translate(" + source.y0 + 100 + "," + source.x0+  ")";
         // return "translate(" + (source.x0 - 150) + "," + (source.y0 - 300) + ")";
        });
        /*.on("click", (d) => {
          if (d.data.ID !== d.data.TEXT) return click(d);
          else return null;
        })*/
        let newList = processList(props.DUDProgramData.ID)
        function processList(pgmID){
        //console.log('shilpi pgmlist',props.programList)
        //let pgmList = [...props.DUDProgramData.LIST]
        let pgmList = [...props.dataUsageProgramList]
        let index = pgmList.findIndex(obj => obj.PGMID === pgmID);
        let firstList = []
        let secondList = []
        let indexToSplit = 9 //index of middle row of table
        if (pgmList.length > 1){
          pgmList.splice(indexToSplit, 1, pgmList.splice(index, 1, pgmList[indexToSplit])[0]);
          //console.log('shilpi_du swap', pgmList)
        } 
        let arr = [];
        arr[0] = pgmList[indexToSplit]
        if(index < indexToSplit){
          /* sort sublist */
          firstList = pgmList.slice(0, indexToSplit);
          secondList = pgmList.slice(indexToSplit + 1);
          firstList.sort(function (a, b) {
            return a.PGMID - b.PGMID;
         }) 
       }
        else if(index > indexToSplit){
           firstList = pgmList.slice(0, indexToSplit);
           secondList = pgmList.slice(indexToSplit + 1);
          secondList.sort(function (a, b) {
            return a.PGMID - b.PGMID;
          })
        }
        let mergedArr = firstList.concat(arr,secondList)
        //console.log('Shilpi_du merged', mergedArr)
        //console.log('Shilpi_du props', props.programList)

          // insert pgmID at 6th loc.
          return mergedArr;
        }

      var nodeFo = nodeEnter
        .append("foreignObject")
        //.attr("class", "noder")
        .attr("class",function(d,index){
          if(d.data.TEXT === d.data.ID)
            return "noder";
          return "noder0";
          
        })
        .attr("width", function (d, index) {
          if (d.data.TEXT === d.data.ID && d.data.ID=='Entity') return 500;
            //SA_CHANGE
          else if(d.data.TEXT === d.data.ID && (d.data.ID=='Schema' || d.data.ID=='CODE'))
             return 250
          else return 200;
          //return 150;
        })
        .attr("height", function (d, index) {
          if (d.data.TEXT === d.data.ID && d.data.ID=='Entity') 
          return 30; //just half 150-->75
          else if(d.data.TEXT === d.data.ID && (d.data.ID=='Schema' || d.data.ID=='CODE'))
           return 150
          else return 1100;
          
        })
        .attr(
          "style",
          "background:whitesmoke;border: 1px solid ;font-size:12px;overflow-y:auto"
        )
        .style("border",function(d){
          if(d.data.ID === 'Entity' && d.data.WHFUSG > 4){
            return '2px solid red'
          }
          else if(d.data.ID === 'Entity' && d.data.WHFUSG < 4){
            return '2px solid '
          }
          else{
            return '2px solid '
          }
          
        })

        .style("fill", function (d, index) {
          if (d.data.TEXT === d.data.ID)
            return d._children ? "lightsteelblue" : "#fff";
        })
        .on("mouseover", function (d) {
          //handleMouseOver({ codedata: d.data.CODEDATA, entity: d.data.HEADID });
          handleMouseOver(d);
        })
        .append("xhtml:body")
        .attr("style", "margin: 1px ")
        /////making heading
        .append("table")
        .attr("style","width:100%")
        .attr("id", function(d,index){
          if (d.data.TEXT === d.data.ID)
            return 'table2'
            else{
              return 'table1'
            }
        });
       var columns=["Files","Programs"]
      //nodeFo
      svg.selectAll('#table2').selectAll('tr').remove();
      /*var nodeFo11 = svg.selectAll('#table2').append("thead");
      console.log('nodeFo11',nodeFo11)
      nodeFo11
        .selectAll("thead")
        .data(function (d) {
          if(d.data.ID == 'Entity'){
            console.log('print1',d)
             return d;
            }
            else{
              return [];
            }
          })
        .enter()
        .append("tr")
        .attr("style", "background:darkgrey;text: white;cursor:pointer")
        .on("click",function(d){
          console.log('check d',d)
          if ((d.data.ID === d.data.TEXT) && d.data.ID==='Entity')
          {
            foClick1(d)
          }
        })
        .append("td")
        .text(function (d) {
          console.log('shilpi_d 1', d)
          if (d.data.ID === d.data.TEXT && d.data.ID==='Entity')
            return d.data.HEADID + ": " + d.data.HEADTEXT ;
        });*/
      svg.selectAll('#table2')//.selectAll("foreignObject.noder")
       //.data(function(d){
        // console.log('shilpi_d',d)
         //if(d.data.ID == 'Entity'){
         //  return d
         //}
        // else{
        //   return []
        // }
       //}) 
        .append("thead")
        .append("tr")
        .attr("style", "background:darkgrey;text: white;cursor:pointer")
        .on("click",function(d){
          console.log('check d',d)
          if ((d.data.ID === d.data.TEXT) && d.data.ID==='Entity')
          {
            foClick1(d)
          }
        })
        .append("td")
        .text(function (d) {
          //console.log('shilpi_d 1', d)
          if (d.data.ID === d.data.TEXT && d.data.ID==='Entity')
            return d.data.HEADID + ": " + d.data.HEADTEXT ;
        }); /////ends making making heading
       
        svg.selectAll('#table1').selectAll('tr').remove();
        svg.selectAll('#table1')
        .append("thead")
        .append("tr")
        .attr("style", "background:darkgrey;text: white")
        .selectAll("th")
        .data(columns)
        .enter()
        .append("th")
        .attr("style","cursor:pointer;text-align:left;height:30px")
        .style("width",function(d){
          if(d == 'Files'){
            return ("30%")
          }
          else{
            return ("50%")
          }
        })
        .style("background-color",function(d){
          if(d =='Files' && props.diagramType =='DATA_USAGE_PGM'){
            return 'lightgrey'
          }
          if(d == 'Programs' && props.diagramType =='DATA_USAGE_FILE')
             return 'lightgrey'
        })
        
        .text(function(column) { return column; })
        .on("click",function(d){
          //console.log('shi_click',d)
          if(d == 'Files' && props.diagramType == 'DATA_USAGE_PGM')
             handleClick(d)
             
          if(d == 'Programs' && props.diagramType == 'DATA_USAGE_FILE')
             handleClick(d)
             
        });
    
      //.attr("style", "border: 1px solid;font-size:12px;");
      //var nodeFo1 = nodeFo.append("tbody");
      var nodeFo1 = svg.selectAll('#table2').append("tbody");
      nodeFo1
        .selectAll("foreignObject.noder")
        .data(function (d) {
          console.log('tbody',d)
          if (d.data.ID === d.data.TEXT && d.data.ID === "Schema")
            return d.data.SCHMADATA;
          else if (d.data.ID === d.data.TEXT && d.data.ID === "CODE")
            return d.data.DATA;
          else return [];
        })
        .enter()
        .append("tr")
        .attr("class", classes.fotable)
        .on("click", function (e) {
          if (e.hasOwnProperty("MVARDB")) foCodeClick(e);
          else foClick(e);
        })
        .on("contextmenu", function (d) {
          console.log('shilpi table data',d)
          const container = d3.select("#DUDcontainerTree").node();
          console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#d3contextMenu2")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              //console.log('clicked',d.PGMID )
              console.log('shilpi_clicked',d)
              currentPgm = d
              //console.log('shilpi currentpgm',currentPgm)
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#DUDcontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#d3contextMenu2")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })
        .append("td")
        .text(function (e) {
          //return e.FTXT + "(" + e.SHORTNM + ")";
          return e.ID + ": " + e.TEXT ;
        });

        //Shilpi List Changes start
        var nodeFo2 = svg.selectAll('#table1').append("tbody");
      nodeFo2
        .selectAll("foreignObject.noder0")
        .data(function (d) {
          return newList;
        })
        .enter()
        .append("tr")
        .attr("class", classes.fotable)
        .on("click", function (d) {
         
          let progDetails = [];
          progDetails.push({
            field: "PGMID",
            code: d.PGMID,
            text: d.PGMTX,
            value: d.PGMID, 
          })
          props
          .setForProgram(progDetails);
          props
          .setDataUsageProgram(progDetails)
          .then((dispatch, res) => console.log(res, dispatch));
          
          //foClick(e.SHORTNM, e.FTXT);
        })
        .on("contextmenu", function (d) {
          console.log('shilpi table data',d)
          const container = d3.select("#DUDcontainerTree").node();
          console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#d3contextMenu")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              console.log('clicked',d.PGMID )
              //currentPgm = d.PGMID
              currentPgm = d;  //in future check if this has a PGM STRUC CHART
              //console.log('shilpi currentpgm',currentPgm)
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#DUDcontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#d3contextMenu")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })
        .append("td")
        .attr("colspan","2")
        .attr("class",classes.focell)
        .style("background",function(d){
          if(d.PGMID == props.DUDProgramData.ID){
            return "lightblue"
          }
        })
        .text(function (d) {
          return d.PGMID + ": " + d.PGMTX;
        });
       
        

      function foCodeClick(node) {
        console.log("clicked in code FO", node, props,
        codeData);
        
      var shortnm = node.MVARDB!== ""? node.MVARDB : (node.SVAR1!=="" ? node.SVAR1 : (node.SVAR2!=="" ? node.SVAR2 : (node.SVAR3!=="" ? node.SVAR3 : (node.SVAR4!=="" ? node.SVAR4: ""))) );
       console.log("shortnm===", shortnm);
       var item = [
            {
              field: props.ForProgram[0].field,
              text: props.ForProgram[0].text,
              value: props.ForProgram[0].value,
              //codeData:codeData,
              shortnm:shortnm,
            }];
         props.linkClickHandler(event,"but31", item,"Source Browser","LBContext");

        // props.linkClickHandler(
        //   event,
        //   "CodeList",
        //   [
        //     {
        //       field: props.ForProgram[0].field,
        //       text: props.ForProgram[0].text,
        //       value: props.ForProgram[0].value,
        //     },
        //     {
        //       field: "ENTID",
        //       text: "",
        //       value: node.FILENM,
        //     },
        //     {
        //       field: "SHORTNM",
        //       text: "",
        //       value: shortnm,
        //     },
        //   ],
        //   "Source Code",
        //   "LeftBar"
        // );
      }
        
      function handleClick(head){
        console.log('shilpi inside handleclick')
        if(head == "Programs"){
          console.log('head programs')
          props.setDiagramType("DATA_USAGE_PGM")
         /* props.linkClickHandler('','but27',[{field:"PGMID",
             value:"APS005",
             text:"Wrk:Account list text",
             idx:-1}],'Data Usage','LBContext','')*/
        }
        if(head == "Files"){
          /*props.linkClickHandler('','but29',[{field:"ENTID",
          value:"CSYCAL",
          text:"MF: System calender",
          idx:-1}],'Data Usage','LBContext','')*/
          props.setDiagramType("DATA_USAGE_FILE")
        }

      }
      function foClick1(node) {
        console.log('clicked node',node)
        //node.data.children[0].HEADTEXT = node.HEADTEXT;
        //node.data.childer[0].HEADTEXT = node.HEADTEXT;
        click(node)
      }
      function foClick(node) {
        // PGMCODE = SELENTITY.codedata.filter(
        //   (pcode) => pcode.MVARDB === node.ID
        // );
        //console.log('foclick node',node)
        PGMCODE = SELENTITY.data.CODEDATA.filter(
          (pcode) => (pcode.MVARDB === node.ID || pcode.SVAR1 === node.ID || pcode.SVAR2 === node.ID || pcode.SVAR3 === node.ID || pcode.SVAR4 === node.ID 
        ));

        SELENTITY.data.children[0].DATA = PGMCODE;
        SELENTITY.data.children[0].HEADTEXT = node.TEXT;
        SELENTITY.data.children[0].HEADID = node.ID;
        console.log("inside foclick click===", SELENTITY);
        //window.scrollBy(750,0)
        click(SELENTITY);
      }

      function handleMouseOver(selEntity) {
        SELENTITY = selEntity;
      }

     // UPDATE
      var nodeUpdate = nodeEnter.merge(node);

      // Transition to the proper position for the node
      nodeUpdate
        .transition()
        .duration(duration)
        .attr("transform", function (d) {
          if (d.data.ID === d.data.TEXT && d.data.ID == 'Entity')
            return "translate(" + d.y + "," + (d.x -40) + ")";
          //return "translate(" + (d.y-190) + "," + (d.x-20) + ")";
          else if (d.data.ID === d.data.TEXT && (d.data.ID == 'Schema' || d.data.ID == 'CODE'))
            return "translate(" + d.y + "," + (d.x -100) + ")";
          else
            return "translate(" + (d.y-190) + "," + (-20) + ")";
          /* This is the actual point of translation- y is for x since it is horiz. tree */
          //return "translate(" + (d.x - 300) + "," + (d.y - 300) + ")";
        });

      nodeUpdate
        .select("rect.noder")
        .attr("width", function (d, index) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .attr("height", function (d, index) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .style("fill", function (d, index) {
          if (d.data.TEXT === d.data.ID)
            return d._children ? "lightsteelblue" : "#fff";
          else return 0;
        })
        .attr("cursor", "pointer");

      // Remove any exiting nodes
      var nodeExit = node
        .exit()
        .transition()
        .duration(duration)
        .attr("transform", function (d) {
          if (d.data.ID === d.data.TEXT)
            return "translate(" + source.y + "," + (source.x - 50) + ")";
          return "translate(" + source.y + "," + source.x + ")";
        })
        .remove();

      // On exit reduce the node circles size to 0
      nodeExit.select("circle").attr("r", function (d) {
        if (d.data.TEXT !== d.data.ID) return 1e-6;
        else return 0;
      });
      // nodeExit.select("circle").attr("r", function (d) {
      //   return 1e-6;
      // });
      nodeExit
        .select("foreignObject")
        .attr("width", function (d) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .attr("height", function (d) {
          if (d.data.TEXT == d.data.ID) return 100;
          else return 0;
        });

      // On exit reduce the opacity of text labels
      nodeExit.select("text").style("fill-opacity", 1e-6);

      // ****************** links section ***************************

      // Update the links...
      /*var link = svg.selectAll("path.link").data(links, function (d) {
        return d.id;
      });

      // Enter any new links at the parent's previous position.
      var linkEnter = link
        .enter()
        .insert("path", "g")
        //seema changes
        .style("stroke", "black") // colour the path
        .style("fill", "none")

        .style("vector-effect", "non-scaling-stroke")
        //seema ends
        .attr("class", "link")
        .attr("d", function (d) {
          var o = { x: source.x0, y: source.y0 };

          return diagonal(o, o);
        });

      // UPDATE
      var linkUpdate = linkEnter.merge(link);

      // Transition back to the parent element position
      linkUpdate
        .transition()
        .duration(duration)
        .attr("d", function (d) {
          return diagonal(d, d.parent);
        });

      // Remove any exiting links
      var linkExit = link
        .exit()
        .transition()
        .duration(duration)
        .attr("d", function (d) {
          var o = { x: source.x, y: source.y };
          return diagonal(o, o);
        })
        .remove();*/

      // Store the old positions for transition.
      nodes.forEach(function (d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });

      // Creates a curved (diagonal) path from parent to the child nodes
      function diagonal(s, d) {
        //console.log("source/des==", s, d);
        let path = `M ${s.y} ${s.x}
            C ${(s.y + d.y) / 2} ${s.x},
              ${(s.y + d.y) / 2} ${d.x},
              ${d.y} ${d.x}`;

        return path;
      }

      // Toggle children on click.
      function click(d) {
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        update(d);
      }
    }
  }
  //console.log("FTXT===", FTXT);
  return (
    <div
      id="dudmaincontainer"
      style={
        {
          // position: "relative", //initially
        }
      }
    >
      <div className={classes.caption}>
        <span className={classes.span}>
          {props.screenDetail.navigation} of {props.ForProgram[0].value}:
          {' '} {props.ForProgram[0].text}
        </span>
      </div>
      <div
        id="DUDcontainerTree">
        <div className={classes.d3contextMenu} id="d3contextMenu">
           <div className={classes.d3contextItem} onClick={handlePgmStructureChart} >
             <p className={classes.d3menuItem}>{`Go to PgmStructureChart`}</p>
            </div>
            <div className={classes.d3contextItem} onClick={handleDataUsage}>
              <p className={classes.d3menuItem}>{`Go to DataUsage`}</p>
            </div>
        </div>
        <div className={classes.d3contextMenu} id="d3contextMenu2">
           <div className={classes.d3contextItem} onClick={handleDataModelDiagram} >
             <p className={classes.d3menuItem}>{`Go to DataModelDiagram`}</p>
            </div>
            <div className={classes.d3contextItem} onClick={handleDataUsageFile}>
              <p className={classes.d3menuItem}>{`Go to DataUsage`}</p>
            </div>
        </div>
        {/* {drawDUD()}*/}
      </div>
      {/*{LoadCode.length > 0 ? (
        <div className={classes.codeeditor}>
          <CodeEditor CodeData={LoadCode} {...props} />
        </div>
      ) : null} */}
    </div>
  );
}
