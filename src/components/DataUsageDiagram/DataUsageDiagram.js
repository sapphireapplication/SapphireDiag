import React, { useEffect, useState } from "react";
import * as d3 from "d3";
import $ from 'jquery';
import CodeEditor from "./sourceBrowser";
import Button from "@material-ui/core/Button";
import CloseIcon from '@material-ui/icons/Close';
import IconButton from '@material-ui/core/IconButton';
import { Hidden } from "@material-ui/core";

export default function DataUsageDiagram(props) {
  const { classes } = props;
  //const [LoadCode, setLoadCode] = useState('0');
  var SELENTITY = { codedata: [], entity: "" };
  var PGMCODE = [];
  var FTXT = "";
  let currentPgm = '';
   let k = 0;
   var nodeUpdate;
   var linkUpdate;
  //const [codeData, setCodeData] = React.useState({pgmID:"", entID:"", codeData:[]});
var codeData = {};
    useEffect(() => {
      if( props.DUDProgramData.DUDProgramData !=="")
        drawDFD();
    }, [props.DUDProgramData.DUDProgramData, props.mainWindowState]);
    function handlePgmStructureChart(){
     let progDetails = {
            field: "PGMID",
            text: currentPgm.PGMTX,
            value: currentPgm.PGMID, 
          };
    
    if(props.screenId=='dataUsage')
    props.linkClickHandler('pgmSChart',progDetails, "")
    else if (props.screenId=='pgmSChart')
    props.pgmLinksHandler('pgmStrChart',progDetails);
  }

  function handleDataUsage(){
    
     let progDetails = {
            field: "PGMID",
            //code: prog.PGMID,
            text: currentPgm.PGMTX,
            value: currentPgm.PGMID, 
          };
          
          props.setDataUsageProgram(progDetails);
          
            
  }
  function handleDataUsageFile(){
    
    let progDetails = {
            field: "ENTID",
            //code: currentPgm.ENTID,
            text: currentPgm.text,
            value: currentPgm.value, 
          };
    console.log('shilpi progdetails',progDetails)
    props.dudLinksHandler('dataDataUsage',progDetails)
  }

  function handleDataModelDiagram(){
    //console.log('shilpi handleDataModelDiagram clicked',currentPgm)
    let progDetails = [];
    //let prog = props.programList.find(o => o.PGMID == currentPgm)
    progDetails.push({
            field: "ENTID",
            code: currentPgm.ENTID,
            text: currentPgm.ENTTX,
            value: currentPgm.ENTID, 
          })
    //console.log('shilpi progdetails',progDetails)
    props.linkClickHandler('','but15',progDetails,'Data Model Diagram','LBContext','')
  }

  function drawDFD() {

    console.log('props in dud',props)
    var treeData = props.DUDProgramData.DUDProgramData;
    console.log("treedat=====", treeData);

    // Set the dimensions and margins of the diagram
    //var margin = { top: 20, right: 90, bottom: 30, left: 0 },
    var margin = { top: 20, right: 90, bottom: 30, left: 90 },
      //width = 960 - margin.left - margin.right,
      //height = 500 - margin.top - margin.bottom;
      width = 5000 - margin.left - margin.right,   //changed width from 960 
      height = 1000 - margin.top - margin.bottom;

      let initialPos = []; //taken this array to overwrite x values generated by d3 on click of node

    // append the svg object to the body of the page
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin

    if (d3.select("#dudsvg")["_groups"][0][0] !== null)
      //removing the existing svg , if anys
      d3.select("#dudsvg").remove();
  
    var i = 0,
      duration = 750,
      root;

    // declares a tree layout and assigns the size
    //var treemap = d3.tree().size([height, width]);

    // Assigns parent, children, height, depth
    root = d3.hierarchy(treeData, function (d) {
      console.log("d===", d)
      return d.children;
    });
    console.log("What is in ROOT===", root);
    //shilpi
    var diff = 0;
    var sep;
    var numRed = 0;
    var mainIndex = 0;
    var num = 0;
    //height = 550;
//////// in case of Left list only (Default)
    if (root.hasOwnProperty("children"))
    {

     num = root.children.length
if(num ==6){
     height = 250
     sep = 3.75

    }
    if(num > 6){
      diff = num - 6;
      height = 250 + diff * 41.66  //factor 41.66 = 250/6
      sep = 3.75
    }
    if(num < 6){
      diff = 6-num;
      height = 250 - diff * 41.66  //factor 41.66 = 250/6
      sep = 3.75
      
    }
  }
var svgHeight = height+ num*500;
var svg;
console.log("window state==", props.mainWindowState, props.tgtgrpid)
/////////trying to reuse component for PGMstructeure
if (props.mainWindowState=="PGMSC_DU"){
  // console.log("in if line 149",props.tgtgrpid, document.getElementById(`${props.tgtgrpid}`));
  // console.log("in if", document.getElementById("grpmain"));
  //console.log("xxx==", tgtgrpid, d3.select(`#${tgtgrpid}`).attr('transform'))
    var grptrans = d3.select(`#${props.tgtgrpid}`).attr('transform');
    var tempCoords = grptrans.substring(10, grptrans.length - 1);
      var x = parseFloat(tempCoords.split(',')[0])+ 610.00;
      var y = parseFloat(tempCoords.split(',')[1]);
      // console.log(x);
      // console.log(y);

  
  console.log("in if", d3.select("foreignObject[id^='rightSvg']"));
  if (d3.select("foreignObject[id^='rightSvg']")["_groups"][0] !== null)
  d3.select("foreignObject[id^='rightSvg']").remove();
  else
  console.log("not removed")
   svg = d3
  .select(`#grpmain`)
  .append('foreignObject')
  .attr('id', `rightSvg${props.tgtgrpid}`)
  .attr('height', svgHeight)
  .attr('width', width )
  .attr('x', x)
  .attr('y', y)
  .attr('style', 'background-color:white;border:1px black solid')
  .append('svg')
  .attr('id','check')
  .attr('width', width)
  .attr('height', svgHeight)
  .append("g")
   .attr("id", "main1")
 
 .attr("transform", " scale(4)");
  /////////trying to add button
 
   let but = svg
   
   .append("rect")
   .attr("x", 25)
   .attr("y", 0)
   .attr("width", 20)
   .attr("height",20)
   .attr("fill","white")
   .attr("stroke-width", 1)
   .attr("stroke", "black")
   


var tex = svg.append("text")
// .attr("text-anchor", "middle")
// .attr("alignment-baseline", "middle")
// .attr("fill", function (d) {
//   return "black";
// })
.attr("x", 30)
.attr("y", 15)
.style("font-size", "20px")
.text(function(d){ return "x"})
.on('click',function(d){
   handleCloseClick();
});
//.attr("transform", "translate(" + 550 + "," + 550 + ")  ")


}



////////ending here
    else {
      console.log("in else");
     svg = d3
      .select("#dudcontainerTree")
      .append("svg")
      .attr("id", "dudsvg")

      // .attr("width", width + margin.right + margin.left)
      // .attr("height", height + margin.top + margin.bottom);
      .attr("width", width)
      //.attr("height", 500)
      .attr("height",  svgHeight + margin.top + margin.bottom)
      //.attr("height",height)
    }
    let gp =svg
      .append("g")
      .attr("id", "dudgrpmain")
      // .attr("transform", "translate(190, " + margin.top + ")"); changing hit n trial
      
      var treemap = d3.tree().size([height, width]);

    root.x0 = height / 2;
    root.y0 = 0;

    // Collapse after the second level

    if(root.hasOwnProperty("children"))
    root.children.forEach(collapse);
    //Collapse only last 2
    //root.children.map((x, idx) => (idx === 0 || idx === 1 ? collapse(x) : ""));

    update(root);
    
    // Collapse the node and all it's children
    function collapse(d) {
      if (d.children) {
        d._children = d.children;
        d._children.forEach(collapse);
        d.children = null;
      }
    }

    function update(source) {
      // Assigns the x and y position for the nodes
 if(source != root){
         k=0;
        ///// compute additional height
        root.children.forEach(function(d){
          if(d.children && d.children.length > 0)
          k++;
        })
      }
      console.log('shi_k',k)
 
  if(k>1)
  {
  treemap = d3.tree().size([height+(k-1)*120, width])
  //treemap = d3.tree().size([height+(k*30*30), width])
            .separation(function(a, b) {
     //         console.log('shilpi_a',a)
       //       console.log('shilpi_b',b)
              return a.parent == b.parent ? 1 : sep   //5
            });
    }
    else{
      treemap = d3.tree().size([height, width])
  //treemap = d3.tree().size([height+(k*30*30), width])
            .separation(function(a, b) {
     //         console.log('shilpi_a',a)
       //       console.log('shilpi_b',b)
              return a.parent == b.parent ? 1 : sep   //5
            });
    }
      var treeData = treemap(root);

      // Compute the new tree layout.
      var nodes = treeData.descendants(),
        links = treeData.descendants().slice(1);
      console.log("nodes====", nodes);
      console.log("links====", links);
      numRed = 0
      //oot.children.map((x, idx) => (idx === 0 || idx === 1 ? collapse(x) : ""));
      nodes.map((x,idx)=>{
        if(idx > 0){
          if(x.data.WHFUSG >=4) numRed++
          
        }
      })
      console.log('numred numnodes',numRed,num)
      if(numRed > 7){
        mainIndex = 7
      }
      if(numRed <= 7){
        mainIndex = numRed+1
        if(mainIndex == num){
          mainIndex = mainIndex-1
        }
      }
      if(numRed == 0){
        if(num <=14){
          mainIndex = parseInt(num / 2);
        }
        else{
          mainIndex = 7;
        }
      }
     console.log('mainIndex',mainIndex)

      var x3 = nodes[num].x;
      
      // Normalize for fixed-depth.
      nodes.forEach(function (d) {
        //console.log('shilpi_DU data', d)
      if ((d.data.TEXT === d.data.ID) & (d.data.ID==='Entity')) {
        if (props.mainWindowState === "PGMSC_DU")  
        d.y = d.depth * 50; //hit and trial change
        else
          d.y = d.depth * 250;
        }
      else if((d.data.TEXT === d.data.ID) & (d.data.ID==='Schema'))
      if (props.mainWindowState === "PGMSC_DU")  
            d.y = d.depth *50 + 500 //hit and trial change
            else
            d.y = d.depth *250 + 500
      else if((d.data.TEXT === d.data.ID) & (d.data.ID==='CODE'))
           if (props.mainWindowState === "PGMSC_DU") 
            d.y = d.depth * 50 + 750; //hit and trial change
            else
            d.y = d.depth * 250 + 750;
      else
          d.y = d.depth * 75
        //d.y = d.depth*150;
      });
      var chldHeight = 30;
      console.log('chldHeight', chldHeight)

      // ****************** Nodes section ***************************

      // Update the nodes...
      var node = svg.selectAll("g.node").data(nodes, function (d) {
        return d.id || (d.id = ++i);
      });
     

      // Enter any new modes at the parent's previous position.
      var nodeEnter = node
        .enter()
        .append("g")
        .attr("class", "node")
        // .attr("transform", function (d, x) {
        //   if (d.data.TEXT === d.data.ID) {
        //     return (
        //     "translate(" + source.y0 +100 + "," + (source.x0 ) + ")"
            
        //     )
        //   } });

          //return "translate(" + source.y0 + 100 + "," + source.x0+  ")";
         // return "translate(" + (source.x0 - 150) + "," + (source.y0 - 300) + ")";})
        
        /*.on("click", (d) => {
          if (d.data.ID !== d.data.TEXT) return click(d);
          else return null;
        })*/
        //let newList = processList(props.DUDProgramData.DUDProgramData.ID)
        function processList(pgmID){
        //console.log('shilpi pgmlist',props.programList)
        //let pgmList = [...props.DUDProgramData.LIST]
        let pgmList = [...props.dataUsageProgramList]
        let index = pgmList.findIndex(obj => obj.PGMID === pgmID);
        let firstList = []
        let secondList = []
        let indexToSplit = 0 //index of middle row of table
        if (pgmList.length > 1){
          pgmList.splice(indexToSplit, 1, pgmList.splice(index, 1, pgmList[indexToSplit])[0]);
          //console.log('shilpi_du swap', pgmList)
        } 
        let arr = [];
        arr[0] = pgmList[indexToSplit]
        if(index < indexToSplit){
          /* sort sublist */
          firstList = pgmList.slice(0, indexToSplit);
          secondList = pgmList.slice(indexToSplit + 1);
          firstList.sort(function (a, b) {
            return a.PGMID - b.PGMID;
         }) 
       }
        else if(index > indexToSplit){
           firstList = pgmList.slice(0, indexToSplit);
           secondList = pgmList.slice(indexToSplit + 1);
          secondList.sort(function (a, b) {
            return a.PGMID - b.PGMID;
          })
        }
        let mergedArr = firstList.concat(arr,secondList)
        //console.log('Shilpi_du merged', mergedArr)
        //console.log('Shilpi_du props', props.programList)

          // insert pgmID at 6th loc.
          return mergedArr;
        }

      var nodeFo = nodeEnter
        .append("foreignObject")
        .attr("id", function(d,i){
          if(d.data.TEXT !== d.data.ID)
            return "f1";
          else if(d.data.TEXT === d.data.ID && d.data.ID=='Entity')
             return  `nodex${i}`
          })
         
        .attr("class",function(d,index){
          if(d.data.TEXT === d.data.ID)
            return "noder";
          return "noder0";
          
        })
        .attr("width", function (d, index) {
          if (d.data.TEXT === d.data.ID && d.data.ID=='Entity') return 500;
            //SA_CHANGE
          else if(d.data.TEXT === d.data.ID && (d.data.ID=='Schema' || d.data.ID=='CODE'))
             return 250
          else return 0;
          //return 150;
        })
        .attr("height", function (d, index) {
          if (d.data.TEXT === d.data.ID && d.data.ID=='Entity') 
          return chldHeight; //just half 150-->75
          else if(d.data.TEXT === d.data.ID && (d.data.ID=='Schema' || d.data.ID=='CODE'))
           return 150
          //else return svgHeight; // hit and trial
          else return 0;

          
        })
        .attr(
          "style",
          "background:whitesmoke;border: 1px solid ;font-size:12px;overflow-y:auto"
        )
        .style("border",function(d){
          if(d.data.ID === 'Entity' && d.data.WHFUSG >= 4){
            return '2px solid red'
          }
          else if(d.data.ID === 'Entity' && d.data.WHFUSG < 4){
            return '2px solid '
          }
          else{
            return '2px solid '
          }
          
        })

        .style("fill", function (d, index) {
          if (d.data.TEXT === d.data.ID)
            return d._children ? "lightsteelblue" : "#fff";
        })
        .on("mouseover", function (d) {
          //handleMouseOver({ codedata: d.data.CODEDATA, entity: d.data.HEADID });
          handleMouseOver(d);
        })
        /*.on("wheel", function(){
          handleScrolling();
        })*/
        .append("xhtml:body")
        .attr("style", "margin: 1px ")
        /////making heading
        .append("table")
        .attr("style","width:100%")
        .attr("id", function(d,index){
          if (d.data.TEXT === d.data.ID)
            return 'table2'
            else{
              return 'table1'
            }
        });
       //var columns=["Files","Programs"]
      //nodeFo
      svg.selectAll('#table2').selectAll('tr').remove();
      
      svg.selectAll('#table2')//.selectAll("foreignObject.noder")
      
        .append("thead")
        .append("tr")
        .attr("id",function(d,i){
          return  `trow${i}`
        })
        .attr("style", "background:darkgrey;text: white;cursor:pointer; display:table-cell")
        //////adding context menu/////
        .on("contextmenu", function (d) {
          //console.log('shilpi table data',d)
          const container = d3.select("#dudcontainerTree").node();
          //console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#DUDd3contextMenu2")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              //console.log('clicked',d.PGMID )
              
              currentPgm =  {
                field: "ENTID",
                //code: currentPgm.PGMID,
                text: d.data.HEADTEXT,
                value: d.data.HEADID, 
              };
        
              console.log('shilpi currentpgm',currentPgm)
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#dudcontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#DUDd3contextMenu2")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })

        ////ending context menu
        .on("click",function(d){
          console.log('check d',d)
          if ((d.data.ID === d.data.TEXT) && d.data.ID==='Entity')
          {
            foClick1(d)
          }
        })
        .append("td")
        .text(function (d) {
          //console.log('shilpi_d 1', d)
          if (d.data.ID === d.data.TEXT && d.data.ID==='Entity')
            return d.data.HEADID + ": " + d.data.HEADTEXT ;
        }); /////ends making making heading
       
        svg.selectAll('#table1').selectAll('tr').remove();
       /* svg.selectAll('#table1')
        .append("thead")
        .append("tr")
        .attr("style", "background:darkgrey;text: white")
        .selectAll("th")
        .data(columns)
        .enter()
        .append("th")
        .attr("style","cursor:pointer;text-align:left;height:30px")
        .style("width",function(d){
          if(d == 'Files'){
            return ("30%")
          }
          else{
            return ("50%")
          }
        })
        .style("background-color",function(d){
          if(d =='Files' && props.diagramType =='DATA_USAGE_PGM'){
            return 'lightgrey'
          }
          if(d == 'Programs' && props.diagramType =='DATA_USAGE_FILE')
             return 'lightgrey'
        })
        
        .text(function(column) { return column; })
        .on("click",function(d){
          //console.log('shi_click',d)
          if(d == 'Files' && props.diagramType == 'DATA_USAGE_PGM')
          //if(d == 'Files' )
             handleClick(d)
             
          if(d == 'Programs' && props.diagramType == 'DATA_USAGE_FILE')
          //if(d == 'Programs')
             handleClick(d)
             
        });*/
    
      //.attr("style", "border: 1px solid;font-size:12px;");
      //var nodeFo1 = nodeFo.append("tbody");
      var nodeFo1 = svg.selectAll('#table2').append("tbody");
      nodeFo1
        .selectAll("foreignObject.noder")
        .data(function (d) {
          //console.log('tbody',d)
          if (d.data.ID === d.data.TEXT && d.data.ID === "Schema")
            return d.data.SCHMADATA;
          else if (d.data.ID === d.data.TEXT && d.data.ID === "CODE")
            return d.data.DATA;
          else return [];
        })
        .enter()
        .append("tr")
        .attr("class", classes.fotable)
        .on("click", function (e) {
          if (e.hasOwnProperty("MVARDB")) foCodeClick(e);
          else foClick(e);
        })
        .on("contextmenu", function (d) {
          console.log('shilpi table data',d)
          const container = d3.select("#dudcontainerTree").node();
          console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#DUDd3contextMenu2")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              //console.log('clicked',d.PGMID )
              console.log('shilpi_clicked',d)
              currentPgm = d
              //console.log('shilpi currentpgm',currentPgm)
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#dudcontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#DUDd3contextMenu2")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })
        .append("td")
        .text(function (e) {
          //return e.FTXT + "(" + e.SHORTNM + ")";
          return e.ID + ": " + e.TEXT ;
        });

        if (props.mainWindowState==="PGMSCHART") {
        //Shilpi List Changes start
        var nodeFo2 = svg.selectAll('#table1').append("tbody");
      nodeFo2
        .selectAll("foreignObject.noder0")
        .data(function (d, i) {
          return props.dataUsageProgramList;
          //return newList;
        })
        .enter()
        .append("tr")
        .attr("id", function (d,i){ return `tr${i}`} )
        .attr("class", classes.fotable)
        .on("click", function (d) {
          //console.log("shilpi_du row clicked",e);
          //drawDFD(e.PGMID)
          let progDetails = {
            field: "PGMID",
            //code: d.PGMID,
            text: d.PGMTX,
            value: d.PGMID, 
          };
         
           props
           .setDataUsageProgram(progDetails);
           props.setSourceBrowser({field:"", value:"", text:"", shortnm:""});
          //props.pgmLinksHandler("pgmDataUsage", progDetails);
          
        })
        .on("contextmenu", function (d) {
          console.log('shilpi table data',d)
          const container = d3.select("#dudcontainerTree").node();
          console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#DUDd3contextMenu")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              console.log('clicked',d.PGMID )
              //currentPgm = d.PGMID
              currentPgm = d;  //in future check if this has a PGM STRUC CHART
              //console.log('shilpi currentpgm',currentPgm)
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#dudcontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#DUDd3contextMenu")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })
        .append("td")
        .attr("colspan","2")
        .attr("class",classes.focell)
        .style("background",function(d, i){

         

          if(d.PGMID == props.DUDProgramData.DUDProgramData.ID){
            var arrind = props.dataUsageProgramList.findIndex(row=>
              row.PGMID ===props.DUDProgramData.DUDProgramData.ID 
             )
            
            var subRtFocus = document.getElementById(`tr`+arrind);
            ////old start
            /*
            //get scroll factor
            var nodePos = document.getElementById('nodex3').getBoundingClientRect()['top'];
            var tr2Pos = document.getElementById('tr2').getBoundingClientRect()['top'];
            var x = parseFloat(tr2Pos)-parseFloat(nodePos);// the diff in 3rd pos of DUD / left table
            
            //var nodePosTop = document.getElementById('trow2').getBoundingClientRect()['top']
            console.log('shilpi nodepos',nodePos, tr2Pos, x)
           //console.log('tr',subRtFocus.getBoundingClientRect()['top']);
            //document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']-179);
            //document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- parseFloat(tr2pos));
            document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- nodePos -x);*/
            ///old ends
           var tidx = mainIndex -1

            var nodePos = document.getElementById(`nodex`+mainIndex).getBoundingClientRect()['top'];
            var tr2Pos = document.getElementById(`tr`+tidx).getBoundingClientRect()['top'];
            if(source!=root){
              tr2Pos = document.getElementById(`tr`+arrind).getBoundingClientRect()['top']
            }
            var x = parseFloat(tr2Pos)-parseFloat(nodePos);// the diff in 3rd pos of DUD / left table
            
            //var nodePosTop = document.getElementById('trow2').getBoundingClientRect()['top']
            console.log('shilpi nodepos',nodePos, tr2Pos, x,document.getElementById('tr0').getBoundingClientRect()['top'],document.getElementById('nodex1').getBoundingClientRect()['top'])
           //console.log('tr',subRtFocus.getBoundingClientRect()['top']);
            //document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']-179);
            //document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- parseFloat(tr2pos));
            //document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- (nodePos-x));
            document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- nodePos-x);
            console.log('calling scrollby')
            return "lightblue"
          }
          
        })
        .text(function (d) {
          return d.PGMID + ": " + d.PGMTX;
        });
      }//////if ends 

        //console.log("table status===", d3.select('#table1'));
       
      function handleScrolling(){
        if(props.DUDProgramData.program.value!=="default"){
          var arrind = props.dataUsageProgramList.findIndex(row=>
            row.PGMID ===props.DUDProgramData.program.value)
          
          var subRtFocus = document.getElementById(`tr`+arrind);
          //get scroll factor
          var nodePos = subRtFocus.getBoundingClientRect()['top'];
          console.log("in scrolling==", nodePos);
           
          var x = parseFloat(nodePos) ;// the diff in 3rd pos of DUD / left table
          var movfact = nodePos-250;
          
          //console.log("where is node after scrolling==",tr2Pos)
          
          nodeUpdate
          .transition()
          .duration(duration)
          .attr("transform", function (d) {
            console.log("in handleScroll",d);
           if (d.data.ID === d.data.TEXT){
              return "translate(" + d.y + "," + (d.x+movfact) + ")";
           }
            //   else
            // return "translate(" + (d.y-190) + "," + (-20) + ")";
           
            
             
          })
          linkUpdate
        .transition()
        .duration(duration)
        .attr("d", function (d) {
          return drawLine(d, d.parent,movfact);
        });
          
         
        }
        

      }  
      
        function foCodeClick(node) {
        console.log("clicked in code FO", node, props,
        codeData);
        
      var shortnm = node.MVARDB!== ""? node.MVARDB : (node.SVAR1!=="" ? node.SVAR1 : (node.SVAR2!=="" ? node.SVAR2 : (node.SVAR3!=="" ? node.SVAR3 : (node.SVAR4!=="" ? node.SVAR4: ""))) );
       console.log("shortnm===", shortnm);
       var item = 
            {
              field: props.DUDProgramData.program.field,
              text: props.DUDProgramData.program.text,
              value: props.DUDProgramData.program.value,
              //codeData:codeData,
              shortnm:shortnm,
            };
         props.pgmLinksHandler("pgmSourceBrowser", item);

        // props.linkClickHandler(
        //   event,
        //   "CodeList",
        //   [
        //     {
        //       field: props.ForProgram[0].field,
        //       text: props.ForProgram[0].text,
        //       value: props.ForProgram[0].value,
        //     },
        //     {
        //       field: "ENTID",
        //       text: "",
        //       value: node.FILENM,
        //     },
        //     {
        //       field: "SHORTNM",
        //       text: "",
        //       value: shortnm,
        //     },
        //   ],
        //   "Source Code",
        //   "LeftBar"
        // );
      }
        
      function handleClick(head){
        console.log('shilpi inside handleclick')
        if(head == "Programs"){
           console.log('head programs yahan kab aayega')
          // props.setDiagramType("DATA_USAGE_PGM")
          // props.dudLinksHandler('pgmdataUsage',{
          //   field: "PGMID",
          //   text:"",
          //   value:"default", 
          // });
        }
        if(head == "Files"){
          let progDetails = 
          console.log('shilpi progdetails',progDetails);

          props.dudLinksHandler('dataDataUsage',{
          field: "ENTID",
          text:"",
          value:"default", 
      });
         
          //props.setDiagramType("DATA_USAGE_FILE")
        }

      }
      function foClick1(node) {
        console.log('clicked node',node);
        props.setSourceBrowser({field:"", value:"", text:"", shortnm:""});
        //node.data.children[0].HEADTEXT = node.HEADTEXT;
        //node.data.childer[0].HEADTEXT = node.HEADTEXT;
        click(node)
      }
      function foClick(node) {
        // PGMCODE = SELENTITY.codedata.filter(
        //   (pcode) => pcode.MVARDB === node.ID
        // );
        console.log('foclick node',SELENTITY.data.CODEDATA, node)
        PGMCODE = SELENTITY.data.CODEDATA.filter(
          (pcode) => (pcode.MVARDB === node.ID || pcode.SVAR1 === node.ID || pcode.SVAR2 === node.ID || pcode.SVAR3 === node.ID || pcode.SVAR4 === node.ID 
        ));

        SELENTITY.data.children[0].DATA = PGMCODE;
        SELENTITY.data.children[0].HEADTEXT = node.TEXT;
        SELENTITY.data.children[0].HEADID = node.ID;
        console.log("inside foclick click===", node);
        props.setSourceBrowser({field:"PGMID", value:props.DUDProgramData.program.value, text:"", shortnm:node.ID});
        //click(SELENTITY);
      }

      function handleMouseOver(selEntity) {
        SELENTITY = selEntity;
      }

     // UPDATE
      nodeUpdate = nodeEnter.merge(node);

      // Transition to the proper position for the node
      nodeUpdate
        .transition()
        .duration(duration)
        .attr("transform", function (d) {
         if (d.data.ID === d.data.TEXT)
            return "translate(" + d.y + "," + (d.x ) + ")"; 
          else
            //return "translate(" + (d.y-190) + "," + (-20) + ")"; ///changing hit n trial
            return "translate(" + (d.y) + "," + (0) + ")";
           
        })

      nodeUpdate
        .select("rect.noder")
        .attr("width", function (d, index) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .attr("height", function (d, index) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .style("fill", function (d, index) {
          if (d.data.TEXT === d.data.ID)
            return d._children ? "lightsteelblue" : "#fff";
          else return 0;
        })
        .attr("cursor", "pointer");

      // Remove any exiting nodes
      var nodeExit = node
        .exit()
        .transition()
        .duration(duration)
        .attr("transform", function (d) {
          if (d.data.ID === d.data.TEXT)
           // return "translate(" + source.y + "," + (source.x - 50) + ")";
           return "translate(" + source.y + "," + (source.x ) + ")";
          return "translate(" + source.y + "," + source.x + ")";
        })
        .remove();

      // On exit reduce the node circles size to 0
      nodeExit.select("circle").attr("r", function (d) {
        if (d.data.TEXT !== d.data.ID) return 1e-6;
        else return 0;
      });
      // nodeExit.select("circle").attr("r", function (d) {
      //   return 1e-6;
      // });
      nodeExit
        .select("foreignObject")
        .attr("width", function (d) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .attr("height", function (d) {
          if (d.data.TEXT == d.data.ID) return 100;
          else return 0;
        });

      // On exit reduce the opacity of text labels
      nodeExit.select("text").style("fill-opacity", 1e-6);

      // ****************** links section ***************************

      // Update the links...
      /*var link = svg.selectAll("path.link").data(links, function (d) {
        return d.id;
      });*/
      var link = svg.selectAll("path.link").data(nodes.slice(1), function (d) {
        return d.id;
      });
      

      // Enter any new links at the parent's previous position.
      var linkEnter = link
        .enter()
        .insert("path", "g")
        //seema changes
        .style("stroke", "black") // colour the path
        .style("fill", "none")

        .style("vector-effect", "non-scaling-stroke")
        //seema ends
        .attr("class", "link")
        .attr("d", function (d) {
          var o = { x: source.x0, y: source.y0 };

          return diagonal(o, o);
        });

      // UPDATE
       linkUpdate = linkEnter.merge(link);

      // Transition back to the parent element position
      linkUpdate
        .transition()
        .duration(duration)
        .attr("d", function (d) {
          return drawLine(d, d.parent,0);
        });

      // Remove any exiting links
      var linkExit = link
        .exit()
        .transition()
        .duration(duration)
        .attr("d", function (d) {
          var o = { x: source.x, y: source.y };
          return diagonal(o, o);
        })
        .remove();

      // Store the old positions for transition.
      nodes.forEach(function (d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });

      // Creates a curved (diagonal) path from parent to the child nodes
      function diagonal(s, d) {
        //console.log("source/des==", s, d);
        let path = `M ${s.y} ${s.x}
            C ${(s.y + d.y) / 2} ${s.x},
              ${(s.y + d.y) / 2} ${d.x},
              ${d.y} ${d.x}`;

        return path;
      }

      function drawLine(s, d, addscroll) {
        console.log('mainIndex line',mainIndex)
        if(s.depth ==1){
          let path;
          var x1 = s.x+addscroll+15;
          var y1 = s.y;
          var x2 = x1;
          var diff = 25; //random
          var y2 = s.y-diff;
          if(s.id == 2){
             // path = `M ${y1} ${x1} L ${y2} ${x2} L ${y2} ${x3+addscroll+15} M ${y2} ${x2} L ${y2-50} ${x2}`
             path = `M ${y1} ${x1} L ${y2} ${x2} L ${y2} ${x3+addscroll+15}`
             if(mainIndex == 1){
               console.log('in check');
              path =`M ${y1} ${x1} L ${y2} ${x2} L ${y2} ${x3+addscroll+15} M ${y2} ${x2} L ${y2-50} ${x2}`
             }
          }
          else if(s.id == mainIndex+1){
            path = `M ${y1} ${x1} L ${y2} ${x2} L ${y2} ${x3+addscroll+15} M ${y2} ${x2} L ${y2-50} ${x2}`
          }
          else
           path = `M ${y1} ${x1} L ${y2} ${x2} `;
              

        return path;
          
        }
        if(s.depth ==2){
          var x1 = d.x+addscroll+15;
          var y1 = s.y;
          var x2 = x1;
          var diff = s.y -(d.y+500);
          var y2 = s.y-diff;
          let path = `M ${y1} ${x1} L ${y2} ${x2} `;
              

        return path;
          
        }
        if(s.depth ==3){
          var x1 = d.x+addscroll+15;
          var y1 = s.y;
          var x2 = x1;
          var diff = s.y -(d.y+250);
          var y2 = s.y-diff;
          let path = `M ${y1} ${x1} L ${y2} ${x2} `;
          return path;
        }

        
      }

      // Toggle children on click.
      function click(d) {
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        update(d);
      }
    }
  
  }
//   function handleDUDClose(){
// props.DUDCloseHandler();
//   }
   function handleDUDClose(){
    props.setMainWindowState("PGMSCHART");
   }
   function handleCloseClick()
    {
        console.log("clicking close", d3.select("foreignObject[id^='rightSvg']"));
        d3.select("foreignObject[id^='rightSvg']").remove();
        
    }



  //console.log("FTXT===", FTXT);
  return props.DUDProgramData.DUDProgramData==""?null: props.mainWindowState==="PGMSC_DU" ? "hello" : (
    <div
      id="dudmaincontainer" style={{position:"relative"}}> 
      <div id="dudcontainerTree"> </div>
      
      <div  id="highlightPgm"
        style={{
          width: "190px",
          height:"44px",
          left: "0px",
          top:"0px",
          fontSize:"12px",
          backgroundColor: "lightblue",
          display:"none",
          //borderRadius: "25px",
          //padding:"0px 20px 0px 20px",
          position: "absolute",
        }}></div>
          <div className={classes.d3contextMenu} id="DUDd3contextMenu">
           <div className={classes.d3contextItem} onClick={handlePgmStructureChart} >
             <p className={classes.d3menuItem}>{`Go to PgmStructureChart`}</p>
            </div>
            <div className={classes.d3contextItem} onClick={handleDataUsage}>
              <p className={classes.d3menuItem}>{`Go to DataUsage`}</p>
            </div>
        </div>
        <div className={classes.d3contextMenu} id="DUDd3contextMenu2">
           <div className={classes.d3contextItem} onClick={handleDataModelDiagram} >
             <p className={classes.d3menuItem}>{`Go to DataModelDiagram`}</p>
            </div>
            <div className={classes.d3contextItem} onClick={handleDataUsageFile}>
              <p className={classes.d3menuItem}>{`Go to DataUsage`}</p>
            </div>
        </div>

      <CodeEditor {...props} />
      
    </div>)
  
}
