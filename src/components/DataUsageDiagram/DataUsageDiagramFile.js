import React, { useEffect, useState } from "react";
import * as d3 from "d3";
import $ from 'jquery';
import CodeEditor from "./sourceBrowser";
// import Table from "@material-ui/core/Table";
// import TableBody from "@material-ui/core/TableBody";
// import TableCell from "@material-ui/core/TableCell";
// import TableContainer from "@material-ui/core/TableContainer";
// import TableHead from "@material-ui/core/TableHead";
// import TableRow from "@material-ui/core/TableRow";
// import Paper from "@material-ui/core/Paper";
// import Button from "@material-ui/core/Button";
// import CloseIcon from '@material-ui/icons/Close';
// import IconButton from '@material-ui/core/IconButton';

export default function DataUsageDiagramFile(props) {
  console.log("props to dikha do==", props);
  const { classes } = props;
  //const [LoadCode, setLoadCode] = useState('0');
  // const [rBrowser, setrBrowser] = React.useState({slctd:0, rBrowserData:[]});
  // const [sourceBrowser, setsourceBrowser] = React.useState(0);
  // const [selectedDSE, setselDSE] = React.useState(0);
  // const [ExpData, setExpData] = React.useState({slctd:0, whereusedData:[]});
  // const [highlightIndex, setHighlightIndex] = React.useState(-1);
  // var DSEstyle = selectedDSE === 0 ? {display:"none"}: {display:"block"};
  // var Expstyle = ExpData.slctd===0 ? {display:"none"}: {display:"block"};
  // var rBrowserstyle = rBrowser.slctd===0 ? {display:"none"}: {display:"block"};
  // var sBrowserstyle = sourceBrowser===0 ? {display:"none"}: {display:"block"};

  
  var SELENTITY = { codedata: [], entity: "" };
  var PGMCODE = [];
  var FTXT = "";
  let currentPgm = '';
  var pgmcodeentity=props.DUDFileData.pgmcodeentity;
  let k = 0;
    useEffect(() => {
      if( props.DUDFileData.DUDFileData !=="")
        drawDFD();
    },[props.DUDFileData.DUDFileData, props.mainWindowState]);
    function handlePgmStructureChart(){
      let progDetails = {
             field: "PGMID",
             text: currentPgm.text,
             value: currentPgm.value, 
           };
     
     if(props.screenId=='dataUsage')
     props.linkClickHandler('pgmSChart',progDetails, "")
     else if (props.screenId=='pgmSChart')
     props.pgmLinksHandler('pgmStrChart',progDetails);
   }

  function handleDataUsage(){
    
    let  progDetails ={
            field: "PGMID",
            text: currentPgm.text,
            value: currentPgm.value, 
          }

      props.dudLinksHandler('pgmdataUsage',progDetails);
  }

  function handleDataUsageFile(){
    progDetails = {
            field: "ENTID",
            
            text: currentPgm.ENTTX,
            value: currentPgm.ENTID, 
          }
   
          console.log('progdetails in  handleDUF',progDetails)
          props.dudLinksHandler('dataDataUsage',progDetails)
  }

  function handleDataModelDiagram(){
    //console.log('shilpi handleDataModelDiagram clicked',currentPgm)
    let progDetails = [];
    //let prog = props.programList.find(o => o.PGMID == currentPgm)
    progDetails.push({
            field: "ENTID",
            code: currentPgm.ENTID,
            text: currentPgm.ENTTX,
            value: currentPgm.ENTID, 
          })
    props.linkClickHandler('','but15',progDetails,'Data Model Diagram','LBContext','')
  }

  function drawDFD() {
    var treeData = props.DUDFileData.DUDFileData;

    // Set the dimensions and margins of the diagram
    //var margin = { top: 20, right: 90, bottom: 30, left: 0 },
    var margin = { top: 20, right: 90, bottom: 30, left: 90 },
      width = 5000 - margin.left - margin.right,
      height = 1000 - margin.top - margin.bottom;

      let initialPos = []; //taken this array to overwrite x values generated by d3 on click of node

    // append the svg object to the body of the page
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin

    if (d3.select("#dudfilesvg")["_groups"][0][0] !== null)
      //removing the existing svg , if anys
      d3.select("#dudfilesvg").remove();
    /*let svg = d3
      .select("#containerTree")
      .append("svg")
      .attr("id", "svg1")

      // .attr("width", width + margin.right + margin.left)
      // .attr("height", height + margin.top + margin.bottom);
      .attr("width", "100%")
      //.attr("height", 500)
      .attr("height", height)

      .append("g")
      .attr("id", "grpmain")
      .attr("transform", "translate(190," + margin.top + ")");*/

    //.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var i = 0,
      duration = 750,
      root;

    // declares a tree layout and assigns the size
    //var treemap = d3.tree().size([height, width]);

    // Assigns parent, children, height, depth
    root = d3.hierarchy(treeData, function (d) {
      return d.children;
    });
    //shilpi
    var diff = 0;
    var sep;
  var mainIndex = 0;
    var num = 0;
    //height = 550;
//////// in case of Left list only (Default)
    if (root.hasOwnProperty("children"))
    {

     num = root.children.length
if(num ==6){
     height = 250
     sep = 3.75

    }
    if(num > 6){
      diff = num - 6;
      height = 250 + diff * 41.66  //factor 41.66 = 250/6
      sep = 3.75
    }
    if(num < 6){
      diff = 6-num;
      height = 250 - diff * 41.66  //factor 41.66 = 250/6
      sep = 3.75
      
    }
  }
var svgHeight = height+ num*500;
var svg;
console.log("window state==", props.mainWindowState, props.tgtgrpid)
if (props.mainWindowState=="PGMSC_DU_FILE"){
    var grptrans = d3.select(`#${props.tgtgrpid}`).attr('transform');
    var tempCoords = grptrans.substring(10, grptrans.length - 1);
      var x = parseFloat(tempCoords.split(',')[0])+ 610.00;
      var y = parseFloat(tempCoords.split(',')[1]);
  console.log("in if", d3.select("foreignObject[id^='rightSvg']"));
  if (d3.select("foreignObject[id^='rightSvg']")["_groups"][0] !== null)
  d3.select("foreignObject[id^='rightSvg']").remove();
  else
  console.log("not removed")
   svg = d3
  .select(`#grpmain`)
  .append('foreignObject')
  .attr('id', `rightSvg${props.tgtgrpid}`)
  //.attr('height', svgHeight)
  .attr('width', width )
  .attr('x', x+100)
  .attr('y', y)
  .attr('style', 'background-color:white;border:1px black solid;overflow:auto;height:2000px')
  .append('svg')
  .attr('id','check')
  .attr('width', width)
  .attr('height', svgHeight)
  .append("g")
   .attr("id", "main1")
 .attr("transform", " scale(4)");
   let but = svg
    
   .append("rect")
   .attr("x", 25)
   .attr("y", 0)
   .attr("width", 20)
   .attr("height",20)
   .attr("fill","white")
   .attr("stroke-width", 1)
   .attr("stroke", "black")
var tex = svg.append("text")
.attr("x", 30)
.attr("y", 15)
.style("font-size", "20px")
.text(function(d){ return "x"})
.on('click',function(d){
   handleCloseClick();
});
}
    else {
      console.log("in else");
     svg = d3
      .select("#dudfilecontainerTree")
      .append("svg")
      .attr("id", "dudfilesvg")

      // .attr("width", width + margin.right + margin.left)
      // .attr("height", height + margin.top + margin.bottom);
      .attr("width", width)
      //.attr("height", 500)
      .attr("height",  svgHeight + margin.top + margin.bottom)
      //.attr("height",height)
    }
    let gp =svg
      .append("g")
      .attr("id", "dudfilegrpmain")
      //.attr("transform", "translate(190," + margin.top + ")");
      var treemap = d3.tree().size([height, width]);

    root.x0 = height / 2;
    root.y0 = 0;
    //console.log('root',root.children.length);

    // Collapse after the second level
    if(root.hasOwnProperty("children"))
    root.children.forEach(collapse);
    //Collapse only last 2
    //root.children.map((x, idx) => (idx === 0 || idx === 1 ? collapse(x) : ""));

    update(root);

    // Collapse the node and all it's children
    function collapse(d) {
      if (d.children) {
        d._children = d.children;
        d._children.forEach(collapse);
        d.children = null;
      }
    }

    function update(source) {
      // Assigns the x and y position for the nodes
 if(source != root){
         k=0;
        ///// compute additional height
        root.children.forEach(function(d){
          if(d.children && d.children.length > 0)
          k++;
        })
      }
      console.log('shi_k',k)
 
  if(k>1)
  {
  treemap = d3.tree().size([height+(k-1)*120, width])
  //treemap = d3.tree().size([height+(k*30*30), width])
            .separation(function(a, b) {
     //         console.log('shilpi_a',a)
       //       console.log('shilpi_b',b)
              return a.parent == b.parent ? 1 : sep   //5
            });
    }
    else{
      treemap = d3.tree().size([height, width])
  //treemap = d3.tree().size([height+(k*30*30), width])
            .separation(function(a, b) {
     //         console.log('shilpi_a',a)
       //       console.log('shilpi_b',b)
              return a.parent == b.parent ? 1 : sep   //5
            });
    }
      var treeData = treemap(root);

      // Compute the new tree layout.
      var nodes = treeData.descendants(),
        links = treeData.descendants().slice(1);
      console.log("nodes====", nodes);
      //console.log("links====", links);
      var x3 = nodes[num].x;

      // Normalize for fixed-depth.
      nodes.forEach(function (d) {
        //console.log('shilpi_DU data', d)
      if ((d.data.TEXT === d.data.ID) & (d.data.ID==='Program')) {
 //d.y = d.depth * 50; //hit and trial change
        if (props.mainWindowState === "PGMSC_DU_FILE")  
         d.y = d.depth * 50; //hit and trial change
       else
        d.y = d.depth * 250;
          
      }
      else if((d.data.TEXT === d.data.ID) & (d.data.ID==='Schema'))
            //d.y = d.depth * 300 +100;
            if (props.mainWindowState === "PGMSC_DU_FILE")  
            d.y = d.depth *50 + 500 //hit and trial change
            else
            d.y = d.depth *250 + 500 //hit and trial change
      else if((d.data.TEXT === d.data.ID) & (d.data.ID==='CODE'))
         if (props.mainWindowState === "PGMSC_DU_FILE") 
         d.y = d.depth * 50 + 750; //hit and trial change
        else
            d.y = d.depth * 250 + 750; //hit and trial change
      else
          d.y = d.depth * 75
        //d.y = d.depth*150;
      });
      var chldHeight = 30;
      console.log('chldHeight', chldHeight)

      // ****************** Nodes section ***************************

      // Update the nodes...
      var node = svg.selectAll("g.node").data(nodes, function (d) {
        return d.id || (d.id = ++i);
      });
     

      // Enter any new modes at the parent's previous position.
      var nodeEnter = node
        .enter()
        .append("g")
        .attr("class", "node")
        // .attr("transform", function (d, x) {
        //   if (d.data.TEXT === d.data.ID) {
            //console.log("transform===", source.y0 + 100, source.x0 - 50, x);
        //     return (
             // "translate(" + source.y0 + 100 + "," + (source.x0 - 50) + ")"
        //      //"translate(" + source.y0  + "," + (source.x0 ) + ")"
        //     null
        //     );

          //return "translate(" + source.y0 + 100 + "," + source.x0+  ")";
          // return "translate(" + (source.x0 - 150) + "," + (source.y0 - 300) + ")";})
        
        /*.on("click", (d) => {
          if (d.data.ID !== d.data.TEXT) return click(d);
          else return null;
        })*/
        //let newList = processList(props.DUDProgramData.DUDProgramData.ID)
        function processList(pgmID){
        //console.log('shilpi pgmlist',props.programList)
        //let pgmList = [...props.DUDProgramData.LIST]
        let pgmList = [...props.dataUsageFileList]
        let index = pgmList.findIndex(obj => obj.ENTID.trim() === entID);
        let firstList = []
        let secondList = []
        let indexToSplit = 0 //index of middle row of table
        if (pgmList.length > 1){
          pgmList.splice(indexToSplit, 1, pgmList.splice(index, 1, pgmList[indexToSplit])[0]);
          //console.log('shilpi_du swap', pgmList)
        } 
        let arr = [];
        arr[0] = pgmList[indexToSplit]
        if(index < indexToSplit){
          /* sort sublist */
          firstList = pgmList.slice(0, indexToSplit);
          secondList = pgmList.slice(indexToSplit + 1);
          firstList.sort(function (a, b) {
            return a.ENTID - b.ENTID;
         }) 
       }
        else if(index > indexToSplit){
           firstList = pgmList.slice(0, indexToSplit);
           secondList = pgmList.slice(indexToSplit + 1);
          secondList.sort(function (a, b) {
            return a.ENTID.trim() - b.ENTID.trim();
          })
        }
        let mergedArr = firstList.concat(arr,secondList)
        //console.log('Shilpi_du merged', mergedArr)
        //console.log('Shilpi_du props', props.programList)

          // insert entID at 6th loc.
          return mergedArr;
        }

      var nodeFo = nodeEnter
        .append("foreignObject")
        .attr("id", function(d,i){
          if(d.data.TEXT !== d.data.ID)
            return "f1";
          else if(d.data.TEXT === d.data.ID && d.data.ID=='Program')
             return  `nodex${i}`
          })
        .attr("class",function(d,index){
          if(d.data.TEXT === d.data.ID)
            return "noder";
          return "noder0";
          
        })
        .attr("width", function (d, index) {
          if (d.data.TEXT === d.data.ID && d.data.ID=='Program') return 500;
            //SA_CHANGE
          else if(d.data.TEXT === d.data.ID && (d.data.ID=='Schema' || d.data.ID=='CODE'))
             return 250
          else{
            if(props.mainWindowState != 'PGMSC_DU_FILE')
            return 200;
            else
             return 0;
          
          } 
          //return 150;
        })
        .attr("height", function (d, index) {
          if (d.data.TEXT === d.data.ID && d.data.ID=='Program') 
          return chldHeight; //just half 150-->75
          else if(d.data.TEXT === d.data.ID && (d.data.ID=='Schema' || d.data.ID=='CODE'))
           return 150
          else {
            if(props.mainWindowState != 'PGMSC_DU_FILE')
            return svgHeight;
            else
              return 0;
          } // hit and trial
          
        })
        .attr(
          "style",
          "background:whitesmoke;border: 1px solid ;font-size:12px;overflow-y:auto"
        )
        .style("border",function(d){
          if(d.data.ID === 'Program' && d.data.WHFUSG >= 4){
            return '2px solid red'
          }
          else if(d.data.ID === 'Program' && d.data.WHFUSG < 4){
            return '2px solid '
          }
          else{
            return '2px solid '
          }
          
        })

        .style("fill", function (d, index) {
          if (d.data.TEXT === d.data.ID)
            return d._children ? "lightsteelblue" : "#fff";
        })
        .on("mouseover", function (d) {
          //handleMouseOver({ codedata: d.data.CODEDATA, entity: d.data.HEADID });
          handleMouseOver(d);
        })
        .append("xhtml:body")
        .attr("style", "margin: 1px ")
        /////making heading
        .append("table")
        .attr("style","width:100%")
        .attr("id", function(d,index){
          if (d.data.TEXT === d.data.ID)
            return 'table2'
            else{
              return 'table1'
            }
        });
       //var columns=["Files","Programs"]
      //nodeFo
      svg.selectAll('#table2').selectAll('tr').remove();
      svg.selectAll('#table2')  
        .append("thead")
        .append("tr")
        .attr("style", "background:darkgrey;text: white;cursor:pointer; display:table-cell")
        .style("background",function(d,idx){
          if(d.data.ID === 'Program' && d.data.HEADID == props.DUDFileData.DUDFileData.ID){
            mainIndex = idx+1;
            console.log('now check idx',mainIndex)
            return 'lightblue'
          }
          else{
            return 'darkgrey'
          }
        })
        ///adding context menu on head
        .on("contextmenu", function (d) {
          //console.log('shilpi table data',d)
          const container = d3.select("#dudfilecontainerTree").node();
          //console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#d3contextMenu2")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              currentPgm = {
                field: "PGMID",
                text: d.data.HEADTEXT,
                value: d.data.HEADID, 
              };
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#dudfilecontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#d3contextMenu2")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })
        ///ends adding context menu on head 
        .on("click",function(d){
          console.log('check d',d)
          if ((d.data.ID === d.data.TEXT) && d.data.ID==='Program')
          {
            foClick1(d)
          }
        })
        .append("td")
        .text(function (d) {
          if (d.data.ID === d.data.TEXT && d.data.ID==='Program')
            return d.data.HEADID + ": " + d.data.HEADTEXT ;
        }); /////ends making making heading
       
        svg.selectAll('#table1').selectAll('tr').remove();
        
        /*svg.selectAll('#table1')
        .append("thead")
        .append("tr")
        .attr("style", "background:darkgrey;text: white")
        .selectAll("th")
        .data(columns)
        .enter()
        .append("th")
        .attr("style","cursor:pointer;text-align:left;height:30px")
        .style("width",function(d){
          if(d == 'Files'){
            return ("30%")
          }
          else{
            return ("50%")
          }
        })
        .style("background-color",function(d){
          if(d =='Files' && props.diagramType =='DATA_USAGE_PGM'){
            return 'lightgrey'
          }
          if(d == 'Programs' && props.diagramType =='DATA_USAGE_FILE')
             return 'lightgrey'
        })
        
        .text(function(column) { return column; })
        .on("click",function(d){
          //console.log('shi_click',d)
          if(d == 'Files' && props.diagramType == 'DATA_USAGE_PGM')
             handleClick(d)
             
          if(d == 'Programs' && props.diagramType == 'DATA_USAGE_FILE')
             handleClick(d)
             
        });*/
    
      //.attr("style", "border: 1px solid;font-size:12px;");
      //var nodeFo1 = nodeFo.append("tbody");
      var nodeFo1 = svg.selectAll('#table2').append("tbody");
      nodeFo1
        .selectAll("foreignObject.noder")
        .data(function (d) {
          if (d.data.ID === d.data.TEXT && d.data.ID === "Schema")
            return d.data.SCHMADATA;
          else if (d.data.ID === d.data.TEXT && d.data.ID === "CODE")
            return d.data.DATA;
          else return [];
        })
        .enter()
        .append("tr")
        .attr("class", classes.fotable)
        .on("click", function (e) {
          if (e.hasOwnProperty("MVARDB")) foCodeClick(e);
          else foClick(e);
        })
        .on("contextmenu", function (d) {
          //console.log('shilpi table data',d)
          const container = d3.select("#dudfilecontainerTree").node();
          //console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#d3contextMenu2")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              //console.log('clicked',d.PGMID )
              console.log('shilpi_clicked in contextmenu 487',d)
              currentPgm = d
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#dudfilecontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#d3contextMenu2")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })
        .append("td")
        .text(function (e) {
          //return e.FTXT + "(" + e.SHORTNM + ")";
          return e.ID + ": " + e.TEXT ;
        });

        // List Changes start
        if (props.mainWindowState==="DATAUSAGEFILE") {
        var nodeFo2 = svg.selectAll('#table1').append("tbody");
      nodeFo2
        .selectAll("foreignObject.noder0")
        .data(function (d, i) {
          return props.dataUsageFileList;
          //return newList;
        })
        .enter()
        .append("tr")
        .attr("id", function (d,i){ return `tr${i}`} )
        .attr("class", classes.fotable)
        .on("click", function (d) {
          
          let progDetails ={
            field: "ENTID",
            code: d.ENTID.trim(),
            text: d.ENTTX.trim(),
            value: d.ENTID.trim(), 
          }
          props.setDataUsageFile(progDetails,props);
         // if (rBrowser.slctd===1)setrBrowser({slctd:0,rBrowserData:[]});
         // if (sourceBrowser===1) setsourceBrowser(0)
        //  if(selectedDSE===1) setselDSE(0);
         // if(ExpData===1) setExpData({slctd:0, whereusedData:[]})
        })
        .on("contextmenu", function (d) {
          //console.log('shilpi table data',d)
          const container = d3.select("#dudfilecontainerTree").node();
          //console.log('shilpi container',container)
          d3.event.preventDefault();
          const position = d3.mouse(container);
          const posX = position[0] + 10 * .25;
          const posY = position[1];
    
          var g = d3.select("#d3contextMenu")
            .style("top", "" + posY + "px")
            .style("left", "" + posX + "px")
            .style("width","150px")
            .style("height","75px")
            .style("visibility", "visible")
            .style("z-index", 1)
            .on("click",function(){
              console.log('clicked',d.PGMID )
              //currentPgm = d.PGMID
              currentPgm = d;  //in future check if this has a PGM STRUC CHART
              //console.log('shilpi currentpgm',currentPgm)
            })
            d3.selectAll('body').on("click", function (d) {
              const container = d3.select("#dudfilecontainerTree").node();
              d3.event.preventDefault();
              const position = d3.mouse(container);
              d3.select("#d3contextMenu")
                .style("top", "" + 0 + "px")
                .style("left", "" + 0 + "px")
                .style("width","0px")
                .style("height","0px")
                .style("visibility", "hidden");
            });
          
          d3.event.stopPropagation();
        })
        .append("td")
        .attr("colspan","2")
        .attr("class",classes.focell)
        .style("background",function(d, i){
          
          if(d.ENTID.trim()== props.DUDFileData.DUDFileData.ID){
            var arrind = props.dataUsageFileList.findIndex(row=>
            
              row.ENTID.trim() === props.DUDFileData.DUDFileData.ID 
            
             )
             console.log('check arrind   mainIndex', arrind, mainIndex)
            var subRtFocus = document.getElementById(`tr`+arrind);
           var tidx = mainIndex -1
            var nodePos = document.getElementById(`nodex`+mainIndex).getBoundingClientRect()['top'];
            var tr2Pos = document.getElementById(`tr`+tidx).getBoundingClientRect()['top'];
            console.log('shilpi nodePos  tr2pos', nodePos, tr2Pos)
            console.log('shilpi nodePos',  document.getElementById(`nodex`+mainIndex).getBoundingClientRect())
            if(source!=root){
              console.log('not come')
              tr2Pos = document.getElementById(`tr`+arrind).getBoundingClientRect()['top']
            }
            //var x = parseFloat(tr2Pos)-parseFloat(nodePos);// the diff in 3rd pos of DUD / left table
            //console.log('shilpi nodepos',nodePos, tr2Pos, x,document.getElementById('tr0').getBoundingClientRect()['top'],document.getElementById('nodex1').getBoundingClientRect()['top'])
           // document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- nodePos-x);
           //document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- tr2Pos);
            console.log('calling scrollby')
            return "lightblue"
          }
        })
        .text(function (d) {
          return d.ENTID.trim() + ":" + d.ENTTX.trim() ;
        });
      }
        //scroll table now start
       /* var arrind = props.dataUsageFileList.findIndex(row=>
            
          row.ENTID.trim() === props.DUDFileData.DUDFileData.ID 
        
         )
         console.log('check arrind   mainIndex', arrind, mainIndex)
        var subRtFocus = document.getElementById(`tr`+arrind);
       var tidx = mainIndex -1
        var nodePos = document.getElementById(`nodex`+mainIndex).getBoundingClientRect()['top'];
        var tr2Pos = document.getElementById(`tr`+tidx).getBoundingClientRect()['top'];
        console.log('shilpi nodePos  tr2pos', nodePos, tr2Pos)
        console.log('shilpi nodePos',  document.getElementById(`nodex`+mainIndex).getBoundingClientRect())
        if(source!=root){
          console.log('not come')
          tr2Pos = document.getElementById(`tr`+arrind).getBoundingClientRect()['top']
        }
        //var x = parseFloat(tr2Pos)-parseFloat(nodePos);// the diff in 3rd pos of DUD / left table
        //console.log('shilpi nodepos',nodePos, tr2Pos, x,document.getElementById('tr0').getBoundingClientRect()['top'],document.getElementById('nodex1').getBoundingClientRect()['top'])
       // document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- nodePos-x);
       document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- tr2Pos);*/
    //scroll table now ends
       
        //document.getElementById("f1").scrollBy(0,subRtFocus.getBoundingClientRect()['top']- 421);

      function foCodeClick(node) {
      var shortnm = node.MVARDB!== ""? node.MVARDB : (node.SVAR1!=="" ? node.SVAR1 : (node.SVAR2!=="" ? node.SVAR2 : (node.SVAR3!=="" ? node.SVAR3 : (node.SVAR4!=="" ? node.SVAR4: ""))) );
        props.linkClickHandler(
          event,
          "CodeList",
          [
            {
              field: props.ForProgram[0].field,
              text: props.ForProgram[0].text,
              value: props.ForProgram[0].value,
            },
            {
              field: "ENTID",
              text: "",
              value: node.FILENM,
            },
            {
              field: "SHORTNM",
              text: "",
              value: shortnm,
            },
          ],
          "Source Code",
          "LeftBar"
        );
      }
        
      function handleClick(head){
        //console.log('shilpi inside handleclick')
        if(head == "Programs"){
          //console.log('head programs')
          props.dudLinksHandler('pgmdataUsage',{
            field: "PGMID",
            text:"",
            value:"default", 
          });

        }
        if(head == "Files"){
          /*props.linkClickHandler('','but29',[{field:"ENTID",
          value:"CSYCAL",
          text:"MF: System calender",
          idx:-1}],'Data Usage','LBContext','')*/
          // props.setDiagramType("DATA_USAGE_FILE")
          console.log('head files yahan kab aayega')
        }

      }
      function foClick1(node) {
        console.log('clicked node seema',node);
        props.setSourceBrowser({field:"", value:"", text:"", shortnm:""});
        //node.data.children[0].HEADTEXT = node.HEADTEXT;
        //node.data.childer[0].HEADTEXT = node.HEADTEXT;
        click(node)
      }
      function foClick(node) {
        console.log('what is selentity',SELENTITY)
        console.log('what is node ',node)
        PGMCODE = SELENTITY.data.CODEDATA.filter(
          (pcode) => (pcode.MVARDB === node.ID || pcode.SVAR1 === node.ID || pcode.SVAR2 === node.ID || pcode.SVAR3 === node.ID || pcode.SVAR4 === node.ID 
        ));

        SELENTITY.data.children[0].DATA = PGMCODE;
        SELENTITY.data.children[0].HEADTEXT = node.TEXT;
        SELENTITY.data.children[0].HEADID = node.ID;
        console.log("inside foclick click===", SELENTITY);
        //click(SELENTITY);
        
        ////added by seema for global where used
        console.log("on karna chahte hai ham")
           
        var item = 
        {
              field: "PGMID",
              text: "",
              value:"",
              shortnm:node.ID,
            };
            console.log("whats in item====", item)
        props.setSourceBrowser(item);
        // var tempData = pgmcodeentity.filter(pcode=>(pcode.MVARDB === node.ID || pcode.SVAR1 === node.ID || pcode.SVAR2 === node.ID || pcode.SVAR3 === node.ID || pcode.SVAR4 === node.ID 
        //   ));
        
        // console.log("yeh dikhao== ", tempData, pgmcodeentity); 
        // setrBrowser({slctd:1,rBrowserData:tempData});
        
        ////added by seema for global where used ends here
        console.log('foclick node',SELENTITY.data.CODEDATA, node)
        
        
      
      }

      function handleMouseOver(selEntity) {
        SELENTITY = selEntity;
      }

     // UPDATE
      var nodeUpdate = nodeEnter.merge(node);

      // Transition to the proper position for the node
      nodeUpdate
        .transition()
        .duration(duration)
        .attr("transform", function (d) {
         /* if (d.data.ID === d.data.TEXT && d.data.ID == 'Program')
            return "translate(" + d.y + "," + (d.x -40) + ")";
          //return "translate(" + (d.y-190) + "," + (d.x-20) + ")";
          else if (d.data.ID === d.data.TEXT && (d.data.ID == 'Schema' || d.data.ID == 'CODE'))*/
          if (d.data.ID === d.data.TEXT)
            return "translate(" + d.y + "," + (d.x) + ")";
          else
         // return "translate(" + (d.y-190) + "," + (-20) + ")";
         return "translate(" + (d.y) + "," + (0) + ")";
          /* This is the actual point of translation- y is for x since it is horiz. tree */
          //return "translate(" + (d.x - 300) + "," + (d.y - 300) + ")";
        });

      nodeUpdate
        .select("rect.noder")
        .attr("width", function (d, index) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .attr("height", function (d, index) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .style("fill", function (d, index) {
          if (d.data.TEXT === d.data.ID)
            return d._children ? "lightsteelblue" : "#fff";
          else return 0;
        })
        .attr("cursor", "pointer");

      // Remove any exiting nodes
      var nodeExit = node
        .exit()
        .transition()
        .duration(duration)
        .attr("transform", function (d) {
          if (d.data.ID === d.data.TEXT)
            return "translate(" + source.y + "," + (source.x) + ")";
          return "translate(" + source.y + "," + source.x + ")";
        })
        .remove();

      // On exit reduce the node circles size to 0
      nodeExit.select("circle").attr("r", function (d) {
        if (d.data.TEXT !== d.data.ID) return 1e-6;
        else return 0;
      });
      // nodeExit.select("circle").attr("r", function (d) {
      //   return 1e-6;
      // });
      nodeExit
        .select("foreignObject")
        .attr("width", function (d) {
          if (d.data.TEXT === d.data.ID) return 150;
          else return 0;
        })
        .attr("height", function (d) {
          if (d.data.TEXT == d.data.ID) return 100;
          else return 0;
        });

      // On exit reduce the opacity of text labels
      nodeExit.select("text").style("fill-opacity", 1e-6);

      // ****************** links section ***************************

      // Update the links...
      /*var link = svg.selectAll("path.link").data(links, function (d) {
        return d.id;
      });*/
      var link = svg.selectAll("path.link").data(nodes.slice(1), function (d) {
        return d.id;
      });
      

      // Enter any new links at the parent's previous position.
      var linkEnter = link
        .enter()
        .insert("path", "g")
        //seema changes
        .style("stroke", "black") // colour the path
        .style("fill", "none")

        .style("vector-effect", "non-scaling-stroke")
        //seema ends
        .attr("class", "link")
        .attr("d", function (d) {
          var o = { x: source.x0, y: source.y0 };

          return diagonal(o, o);
        });

      // UPDATE
      var linkUpdate = linkEnter.merge(link);

      // Transition back to the parent element position
      linkUpdate
        .transition()
        .duration(duration)
        .attr("d", function (d) {
          return drawLine(d, d.parent);
        });

      // Remove any exiting links
      var linkExit = link
        .exit()
        .transition()
        .duration(duration)
        .attr("d", function (d) {
          var o = { x: source.x, y: source.y };
          return diagonal(o, o);
        })
        .remove();

      // Store the old positions for transition.
      nodes.forEach(function (d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });

      // Creates a curved (diagonal) path from parent to the child nodes
      function diagonal(s, d) {
        //console.log("source/des==", s, d);
        let path = `M ${s.y} ${s.x}
            C ${(s.y + d.y) / 2} ${s.x},
              ${(s.y + d.y) / 2} ${d.x},
              ${d.y} ${d.x}`;

        return path;
      }

      function drawLine(s, d) {
        
        if(s.depth ==1){
          let path;
          //console.log("source/des==", s);
          var x1 = s.x+15;
          var y1 = s.y;
          var x2 = x1;
          var diff = 25; //random
          var y2 = s.y-diff;
          if(s.id == 2){
             path = `M ${y1} ${x1} L ${y2} ${x2} L ${y2} ${x3+15}`
             if(mainIndex == 1){
               console.log('in check');
              path =`M ${y1} ${x1} L ${y2} ${x2} L ${y2} ${x3+15} M ${y2} ${x2} L ${y2-50} ${x2}`
             }
          }
          else if(s.id == mainIndex+1){
            path = `M ${y1} ${x1} L ${y2} ${x2} L ${y2} ${x3+15} M ${y2} ${x2} L ${y2-50} ${x2}`
          }
          else
           path = `M ${y1} ${x1} L ${y2} ${x2} `;
              

        return path;
          
        }
        if(s.depth ==2){
          var x1 = d.x+15;
          var y1 = s.y;
          var x2 = x1;
          var diff = s.y -(d.y+500);
          var y2 = s.y-diff;
          let path = `M ${y1} ${x1} L ${y2} ${x2} `;
              

        return path;
          
        }
        if(s.depth ==3){
          var x1 = d.x+15;
          var y1 = s.y;
          var x2 = x1;
          var diff = s.y -(d.y+250);
          var y2 = s.y-diff;
          let path = `M ${y1} ${x1} L ${y2} ${x2} `;
          return path;
        }

        
      }

      // Toggle children on click.
      function click(d) {
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        update(d);
      }
    }
  }
  function handleCloseClick()
    {
        console.log("clicking close", d3.select("foreignObject[id^='rightSvg']"));
        d3.select("foreignObject[id^='rightSvg']").remove();
        
    }
  //console.log("FTXT===", FTXT);
  return  props.DUDFileData.DUDFileData==""?null: props.mainWindowState==="PGMSC_DU_FILE" ? null : (
    <div id="dudfilemaincontainer" style={{position:"relative"}}>
    {/*  <div className={classes.caption}>
        <span className={classes.span}>
          Data Usage Diagram  {props.DUDFileData.entity === ""?null :
          props.DUDFileData.entity.value === "default" ? "":props.DUDFileData.entity.value}
        </span>
      </div> */}
      <div id="dudfilecontainerTree">
        <div className={classes.d3contextMenu} id="d3contextMenu">
           <div className={classes.d3contextItem} onClick={handleDataUsageFile} >
             <p className={classes.d3menuItem}>{`Go to DataUsage`}</p>
            </div>
            <div className={classes.d3contextItem} onClick={handleDataModelDiagram}>
              <p className={classes.d3menuItem}>{`Go to DataModelDiagram`}</p>
            </div>
        </div>
        <div className={classes.d3contextMenu} id="d3contextMenu2">
           <div className={classes.d3contextItem} onClick={handleDataUsage} >
             <p className={classes.d3menuItem}>{`Go to DataUsage`}</p>
            </div>
            <div className={classes.d3contextItem} onClick={handlePgmStructureChart}>
              <p className={classes.d3menuItem}>{`Go to PgmStructureChart`}</p>
            </div>
        </div>
        {/*drawDFD()*/}
      </div>
     
      <CodeEditor {...props}/>
      
     
    </div>
  );
  //////function related to source browser
  function checkStringInList(opcodes, strng)
{
//console.log("opcodes=", strng)
    for(var i=0; i< opcodes.length ; i++)
    { 
        if(strng.includes(opcodes[i]))
        return {status: true, opcode:opcodes[i]};
        }
    
    return {status: false, opcode:""};
}
function checkforstring(stn)
{
  
  if (stn.includes("'"))
  {
    var sind = stn.indexOf("'");
    var eind = stn.substr(sind+1).indexOf("'")+1;

    return <span>{stn.substr(0,sind)}<span style={{color:"#f19947"}}>{stn.substr(sind,eind+1)}</span>{stn.substr(sind+eind+1)}</span>
  }
  else return <span>{stn}</span>
//
}
  function highlightStn(stn){
  
    var opcodes=['/end-free','/free','dow','enddo','DoU', 'EndDo','Select','EndSl','When','ExSr','EndSr','BegSr','Write','endif','if','monitor', 'endmon'];
    
    var result = checkStringInList(opcodes,stn);
    //console.log("result===", result)
    if (stn.substr(0,1)==' ' && result.status){
      
      var ind = stn.indexOf(result.opcode);
      return (<span>{stn.substr(0,ind)}<span style={{color:"#d68ff5"}}>{stn.substr(ind,result.opcode.length+1)}</span>
             {checkforstring(stn.substr(ind+result.opcode.length+1))}</span>)
    }
    else if (stn.substr(0,1)==' ' && stn.includes("//"))
         return <span style={{color:"rgb(102, 179, 102)"}}>{stn}</span>
    else if (stn.substr(0,1)==' ' && stn.includes("'"))
         return checkforstring(stn)     
        
    else     
    return <span>{stn}</span>
  
  }
function handlerBrowserClickHead(e, row){
    console.log("u clicked==", props.sourceBrowserData, row);

    if (row.PGMID.trim() !==props.sourceBrowserData.pgmID)     
    {
        props.setSourceBrowser({
        field: "PGMID",
        text: "",
        value: row.PGMID,
        shortnm:row.MVARDB==""?row.SVAR1:row.MVARDB,
        })
        .then((json) =>{
        setsourceBrowser(1);
        });
    }

    console.log("whats in row====", row);        
    var arrind = props.sourceBrowserData.pgmCodeData.findIndex(elem=>row.ID ===elem.LineNum);
    console.log("arrind==", arrind);
    var subRtFocus = document.getElementById(`row`+arrind);
    document.getElementById("ceDivC").scrollBy(0, subRtFocus.getBoundingClientRect()['top']-190);
    setHighlightIndex(arrind);

////////////////////////// 
    
}
function handleDSEClick(event) {
    event.preventDefault();
    ////if Explorer window open, close it
    if (ExpData.slctd === 1)
    handleExpClose(event);
    ////if Explorer window open, close it ends
    setselDSE(selectedDSE==0?1:0);
    console.log("key value===", event);

};

function handleSBClose(){
    props.setSourceBrowser({
    field: "PGMID",
    text: "",
    value: "",
    shortnm:"",
    })
    // setsourceBrowser(0);
    //setExpData({slctd:0, whereusedData:[]})
    // if (rBrowser.slcrd===1)setrBrowser({slctd:0,rBrowserData:[]});
    //       if (sourceBrowser===1) setsourceBrowser(0)
    //       if(selectedDSE===1) setselDSE(0);
    //       if(ExpData===1) setExpData({slctd:0, whereusedData:[]})
}
function handleExpClose(event) {
    event.preventDefault();

    setExpData({slctd:0, whereusedData:[]})
    //////Resetting Scroll By to top///////
    document.getElementById("ceDivC").scrollBy(0, document.getElementById(`row1`).getBoundingClientRect()['top']-190);
    setHighlightIndex(-1);
    //////Resetting Scroll By to top ends///////
};
function handleVariableClick(e)
{
    console.log("u clicked==", e.target.innerHTML, props);
    var arr = props.sourceBrowserData.pgmCodeData.filter(row=>
    row.Stn.includes(e.target.innerHTML)  
    )
    if (selectedDSE===1)
    setselDSE(0);
    setExpData({slctd:1, whereusedData:arr});
    //console.log("show whats in arr==", arr);
}   
function goToLineClick(event, elem){
    event.preventDefault();
    console.log("u clicked ", elem);
    var arrind = props.sourceBrowserData.pgmCodeData.findIndex(row=>
    row.LineNum ===elem.LineNum  
    )

    var subRtFocus = document.getElementById(`row`+arrind);
    document.getElementById("ceDivC").scrollBy(0, subRtFocus.getBoundingClientRect()['top']-190);
    setHighlightIndex(arrind);

}





}